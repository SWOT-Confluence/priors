# Standard imports
from pathlib import Path
from shutil import copyfile, rmtree
import unittest

# Third-party imports
from netCDF4 import Dataset
import numpy as np
from numpy.testing import assert_almost_equal, assert_array_equal

# Local imports
from priors.grdc.GRDC import GRDC

class test_GRDC(unittest.TestCase):
    """Test GRDC class methods."""

    APPEND_DIR = Path(__file__).parent / "grdc" / "append" / "constrained"
    SOS_FILE = Path(__file__).parent / "sos" / "constrained" / "na_sword_v11_SOS.nc"
    GRDC_FILE = Path(__file__).parent / "grdc" / "GRDC2SWORDout.nc"

    def test_read_grdc(self):
        """Test read_grdc method."""

        grdc = GRDC(self.SOS_FILE, self.GRDC_FILE)
        grdc.read_grdc()

        i = np.where(grdc.grdc_dict["reach_id"].astype(int) == 73160400101)
        self.assertAlmostEqual(2.265000104904175, grdc.grdc_dict["min_q"][i])
        self.assertAlmostEqual(5691.6767578125, grdc.grdc_dict["max_q"][i])
        self.assertAlmostEqual(141.56002338807968, grdc.grdc_dict["mean_q"][i])
        self.assertAlmostEqual(1718.8299560546875, grdc.grdc_dict["tyr"][i])
        fdq = np.array([917.80383301, 436.07901001, 314.31600952, 247.20599365, 203.31500244, 171.6000061, 146.11500549, 124.59400177, 106.73135803, 91.18000031, 78.72100067, 66.82800293, 56.63399887, 46.43999863, 37.6609993, 29.7329998, 22.70999908, 17.55599976, 13.30900002, 8.94799995])
        assert_almost_equal(fdq, grdc.grdc_dict["fdq"][:,i].flatten())
        monthly_q = np.array([166.6403405, 176.73856679, 301.30343995, 272.31364275, 195.45283308, 110.98473909, 61.10005714, 41.86936427, 49.31205349, 64.67988608, 112.05955187, 148.96845142])
        assert_almost_equal(monthly_q, grdc.grdc_dict["monthly_q"][:,i].flatten())
        self.assertEqual(4147726, grdc.grdc_dict["grdc_id"][i])
        indexes = [78400, 78401, 78402, 78403, 78404, 78405, 78406, 78407, 78408, 78409, 78410, 78411, 78412, 78413, 78414, 78415, 78416, 78417, 78418, 78419, 78420, 78421, 78422, 78423, 78424, 78425, 78426, 78427, 78428, 78429, 78430, 78431, 78432, 78433, 78434, 78435, 78436, 78437, 78438, 78439, 78440, 78441, 78442, 78443, 78444, 78445, 78446, 78447, 78448]
        grdc_q = [9.37300014, 10.50599957, 10.81700039, 11.10000038, 33.13100052, 42.75799942, 23.89900017, 15.12100029, 14.41300011, 16.53700066, 15.85700035, 13.61999989, 12.45899963, 11.49699974, 10.5340004, 9.62800026, 9.11800003, 8.63700008, 8.75, 9.28800011, 9.68400002, 9.59899998, 9.06099987, 8.6079998, 7.9000001, 7.39099979, 6.96600008, 6.73899984, 6.56899977, 6.56899977, 6.48500013, 6.34299994, 6.42799997, 6.37099981, 6.9380002, 10.81700039, 15.29100037, 18.09399986, 14.32800007, 12.14799976, 10.70400047, 9.59899998, 9.37300014, 9.48600006, 8.69299984, 7.9289999, 7.41900015, 7.50400019, 7.98500013]
        assert_almost_equal(grdc_q, grdc.grdc_dict["grdc_q"][indexes,i].flatten())
        grdc_qt = [738029.20833333, 738030.20833333, 738031.20833333, 738032.20833333, 738033.20833333, 738034.20833333, 738035.20833333, 738036.20833333, 738037.20833333, 738038.20833333, 738039.20833333, 738040.20833333, 738041.20833333, 738042.20833333, 738043.20833333, 738044.20833333, 738045.20833333, 738046.20833333, 738047.20833333, 738048.20833333, 738049.20833333, 738050.20833333, 738051.20833333, 738052.20833333, 738053.20833333, 738054.20833333, 738055.20833333, 738056.20833333, 738057.20833333, 738058.20833333, 738059.20833333, 738060.20833333, 738061.20833333, 738062.20833333, 738063.20833333, 738064.20833333, 738065.20833333, 738066.20833333, 738067.20833333, 738068.20833333, 738069.20833333, 738070.20833333, 738071.20833333, 738072.20833333, 738073.20833333, 738074.20833333, 738075.20833333, 738076.20833333, 738077.20833333]
        assert_almost_equal(grdc_qt, grdc.grdc_dict["grdc_qt"][indexes,i].flatten())
        self.assertEqual(78590, grdc.grdc_dict["dt"])

    def test_map_data(self):
        """Test map_data method."""

        grdc = GRDC(self.SOS_FILE, self.GRDC_FILE)
        grdc.read_sos()
        grdc.read_grdc()
        grdc.map_data()

        i = np.where(grdc.map_dict["grdc_reach_id"].astype(int) == 73160400101)
        self.assertAlmostEqual(2.265000104904175, grdc.map_dict["min_q"][i])
        self.assertAlmostEqual(5691.6767578125, grdc.map_dict["max_q"][i])
        self.assertAlmostEqual(141.56002338807968, grdc.map_dict["mean_q"][i])
        self.assertAlmostEqual(1718.8299560546875, grdc.map_dict["tyr"][i])
        fdq = np.array([917.80383301, 436.07901001, 314.31600952, 247.20599365, 203.31500244, 171.6000061, 146.11500549, 124.59400177, 106.73135803, 91.18000031, 78.72100067, 66.82800293, 56.63399887, 46.43999863, 37.6609993, 29.7329998, 22.70999908, 17.55599976, 13.30900002, 8.94799995])
        assert_almost_equal(fdq, grdc.map_dict["fdq"][:,i].flatten())
        monthly_q = np.array([166.6403405, 176.73856679, 301.30343995, 272.31364275, 195.45283308, 110.98473909, 61.10005714, 41.86936427, 49.31205349, 64.67988608, 112.05955187, 148.96845142])
        assert_almost_equal(monthly_q, grdc.map_dict["monthly_q"][:,i].flatten())
        self.assertEqual(4147726, grdc.map_dict["grdc_id"][i])
        indexes = [78400, 78401, 78402, 78403, 78404, 78405, 78406, 78407, 78408, 78409, 78410, 78411, 78412, 78413, 78414, 78415, 78416, 78417, 78418, 78419, 78420, 78421, 78422, 78423, 78424, 78425, 78426, 78427, 78428, 78429, 78430, 78431, 78432, 78433, 78434, 78435, 78436, 78437, 78438, 78439, 78440, 78441, 78442, 78443, 78444, 78445, 78446, 78447, 78448]
        grdc_q = [9.37300014, 10.50599957, 10.81700039, 11.10000038, 33.13100052, 42.75799942, 23.89900017, 15.12100029, 14.41300011, 16.53700066, 15.85700035, 13.61999989, 12.45899963, 11.49699974, 10.5340004, 9.62800026, 9.11800003, 8.63700008, 8.75, 9.28800011, 9.68400002, 9.59899998, 9.06099987, 8.6079998, 7.9000001, 7.39099979, 6.96600008, 6.73899984, 6.56899977, 6.56899977, 6.48500013, 6.34299994, 6.42799997, 6.37099981, 6.9380002, 10.81700039, 15.29100037, 18.09399986, 14.32800007, 12.14799976, 10.70400047, 9.59899998, 9.37300014, 9.48600006, 8.69299984, 7.9289999, 7.41900015, 7.50400019, 7.98500013]
        assert_almost_equal(grdc_q, grdc.map_dict["grdc_q"][indexes,i].flatten())
        grdc_qt = [738029.20833333, 738030.20833333, 738031.20833333, 738032.20833333, 738033.20833333, 738034.20833333, 738035.20833333, 738036.20833333, 738037.20833333, 738038.20833333, 738039.20833333, 738040.20833333, 738041.20833333, 738042.20833333, 738043.20833333, 738044.20833333, 738045.20833333, 738046.20833333, 738047.20833333, 738048.20833333, 738049.20833333, 738050.20833333, 738051.20833333, 738052.20833333, 738053.20833333, 738054.20833333, 738055.20833333, 738056.20833333, 738057.20833333, 738058.20833333, 738059.20833333, 738060.20833333, 738061.20833333, 738062.20833333, 738063.20833333, 738064.20833333, 738065.20833333, 738066.20833333, 738067.20833333, 738068.20833333, 738069.20833333, 738070.20833333, 738071.20833333, 738072.20833333, 738073.20833333, 738074.20833333, 738075.20833333, 738076.20833333, 738077.20833333]
        assert_almost_equal(grdc_qt, grdc.map_dict["grdc_qt"][indexes,i].flatten())
        assert_array_equal(np.array(range(1,78591)), grdc.map_dict["days"])

    def test_update_data(self):
        """Test update_data method."""

        # Copy and load data needed for test
        file_name = "na_sword_v11_SOS.nc"
        if not self.APPEND_DIR.exists(): self.APPEND_DIR.mkdir(parents=True, exist_ok=True)
        copyfile(self.SOS_FILE, self.APPEND_DIR / file_name)

        # Create results
        grdc = GRDC(self.SOS_FILE, self.GRDC_FILE)
        grdc.read_sos()
        grdc.read_grdc()
        grdc.map_data()
        grdc.update_data()

        # Assert results
        sf = self.APPEND_DIR / "na_sword_v11_SOS.nc"
        dataset = Dataset(sf)

        # attributes
        self.assertEqual("0000", dataset.version)
        self.assertEqual("constrained", dataset.run_type)

        # dimensions
        self.assertEqual(1642238, dataset.dimensions["num_nodes"].size)
        self.assertEqual(37565, dataset.dimensions["num_reaches"].size)
        self.assertEqual(1, dataset.dimensions["time_steps"].size)
        self.assertEqual(12, dataset["model"].dimensions["num_months"].size)
        self.assertEqual(20, dataset["model"].dimensions["probability"].size)
        self.assertEqual(78590, dataset["model"]["grdc"].dimensions["num_days"].size)
        self.assertEqual(579, dataset["model"]["grdc"].dimensions["num_grdc_reaches"].size)

        # data
        grdc = dataset["model"]["grdc"]
        i = np.where(grdc["grdc_reach_id"][:] == 73160400101)
        self.assertAlmostEqual(2.265000104904175, grdc["min_q"][i])
        self.assertAlmostEqual(5691.6767578125, grdc["max_q"][i])
        self.assertAlmostEqual(141.56002338807968, grdc["mean_q"][i])
        self.assertAlmostEqual(1718.8299560546875, grdc["two_year_return_q"][i])
        fdq = np.array([917.80383301, 436.07901001, 314.31600952, 247.20599365, 203.31500244, 171.6000061, 146.11500549, 124.59400177, 106.73135803, 91.18000031, 78.72100067, 66.82800293, 56.63399887, 46.43999863, 37.6609993, 29.7329998, 22.70999908, 17.55599976, 13.30900002, 8.94799995])
        assert_almost_equal(fdq, grdc["flow_duration_q"][:][i,:].flatten())
        monthly_q = np.array([166.6403405, 176.73856679, 301.30343995, 272.31364275, 195.45283308, 110.98473909, 61.10005714, 41.86936427, 49.31205349, 64.67988608, 112.05955187, 148.96845142])
        assert_almost_equal(monthly_q, grdc["monthly_q"][:][i,:].flatten())
        self.assertEqual(4147726, grdc["grdc_id"][i])
        indexes = [78400, 78401, 78402, 78403, 78404, 78405, 78406, 78407, 78408, 78409, 78410, 78411, 78412, 78413, 78414, 78415, 78416, 78417, 78418, 78419, 78420, 78421, 78422, 78423, 78424, 78425, 78426, 78427, 78428, 78429, 78430, 78431, 78432, 78433, 78434, 78435, 78436, 78437, 78438, 78439, 78440, 78441, 78442, 78443, 78444, 78445, 78446, 78447, 78448]
        grdc_q = [9.37300014, 10.50599957, 10.81700039, 11.10000038, 33.13100052, 42.75799942, 23.89900017, 15.12100029, 14.41300011, 16.53700066, 15.85700035, 13.61999989, 12.45899963, 11.49699974, 10.5340004, 9.62800026, 9.11800003, 8.63700008, 8.75, 9.28800011, 9.68400002, 9.59899998, 9.06099987, 8.6079998, 7.9000001, 7.39099979, 6.96600008, 6.73899984, 6.56899977, 6.56899977, 6.48500013, 6.34299994, 6.42799997, 6.37099981, 6.9380002, 10.81700039, 15.29100037, 18.09399986, 14.32800007, 12.14799976, 10.70400047, 9.59899998, 9.37300014, 9.48600006, 8.69299984, 7.9289999, 7.41900015, 7.50400019, 7.98500013]
        assert_almost_equal(grdc_q, grdc["grdc_q"][:][i,indexes].flatten())
        grdc_qt = [738029.20833333, 738030.20833333, 738031.20833333, 738032.20833333, 738033.20833333, 738034.20833333, 738035.20833333, 738036.20833333, 738037.20833333, 738038.20833333, 738039.20833333, 738040.20833333, 738041.20833333, 738042.20833333, 738043.20833333, 738044.20833333, 738045.20833333, 738046.20833333, 738047.20833333, 738048.20833333, 738049.20833333, 738050.20833333, 738051.20833333, 738052.20833333, 738053.20833333, 738054.20833333, 738055.20833333, 738056.20833333, 738057.20833333, 738058.20833333, 738059.20833333, 738060.20833333, 738061.20833333, 738062.20833333, 738063.20833333, 738064.20833333, 738065.20833333, 738066.20833333, 738067.20833333, 738068.20833333, 738069.20833333, 738070.20833333, 738071.20833333, 738072.20833333, 738073.20833333, 738074.20833333, 738075.20833333, 738076.20833333, 738077.20833333]
        assert_almost_equal(grdc_qt, grdc["grdc_qt"][:][i,indexes].flatten())
        assert_array_equal(np.array(range(1,78591)), grdc["num_days"])

        dataset.close()
        rmtree(self.APPEND_DIR.parent)